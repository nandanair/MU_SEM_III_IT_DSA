#include<stdio.h>
#include<conio.h>
#include<malloc.h>
struct node
{
 int data;
 struct node*left;
 struct node*right;
};
struct node*tree;
//INSERT OPERATION
struct node*insert(struct node*tree,int val)
{
struct node*new_node,*curr_ptr,*parent_ptr;
new_node=(struct node*)malloc(sizeof(struct node));
new_node->data=val;
new_node->left=NULL;
new_node->right=NULL;
if(tree==NULL)//if tree is empty,insert first element
{
 tree=new_node;
 tree->left=NULL;
 tree->right=NULL;
}
else
{
 parent_ptr=NULL;
 curr_ptr=tree;
 while(curr_ptr!=NULL)//checking position to insert number
 {
 parent_ptr=curr_ptr;
 if(val<curr_ptr->data)
 curr_ptr=curr_ptr->left;
 else
 curr_ptr=curr_ptr->right;
 }
 if(val<parent_ptr->data)//checking which side to insert number
 parent_ptr->left=new_node;
 else
 parent_ptr->right=new_node;
}
return tree;
}
//CREATE A BST
struct node*create(struct node*tree)
{
int n,num,i;
tree=NULL;
printf("\n enter no of nodes:");
scanf("%d",&n);
for(i=0;i<n;i++)
{
 printf("\n enter tree value:");
 scanf("%d",&num);
 tree=insert(tree,num);
}
printf("\nBST created");
return tree;
}
//search operation
struct node*search(struct node*tree,int val)
{
 struct node*temp;
 if(tree==NULL)
 printf("\n element not found");
 else if (tree->data==val)
 printf("\n element found");
 else if (tree->data>val)
 return search(tree->left,val);
 else
 return search(tree->right,val);
}
//height of tree
int height(struct node*tree)
{
 int left_height,right_height;
 if(tree==NULL)
 return 0;
 else
 {
 left_height=height(tree->left);
 right_height=height(tree->right);
 if(left_height>right_height)
 return (left_height+1);
 else
 return (right_height+1);
 }
}
//total no of nodes
int total_nodes(struct node*tree)
{
 if(tree==NULL)
 return 0;
 else
 return total_nodes(tree->left)+total_nodes(tree->right)+1;
}
//no of leaf/external nodes
int leaf_nodes(struct node*tree)
{
 if(tree==NULL)
 return 0;
 else if ((tree->left==NULL )&& (tree->right==NULL))
 return 1;
 else
 return leaf_nodes(tree->left)+leaf_nodes(tree->right);
}
//no of non-leaf/internal nodes
int non_leaf_nodes(struct node*tree)
{
 if((tree==NULL)||(tree->left==NULL )&& (tree->right==NULL))
 return 0;
 else
 return non_leaf_nodes(tree->left)+non_leaf_nodes(tree->right)+1;
}
//min of the nodes
struct node*min(struct node*tree)//leftmost child of the left subtree
{
 if((tree==NULL)||(tree->left==NULL))
 return tree;
 else
 return min(tree->left);
}
//max of the nodes
struct node*max(struct node*tree)//rightmost child of the right subtree
{
 if ((tree==NULL)||(tree->right==NULL))
 return tree;
 else
 return max(tree->right);
}
//in-order traversal(LDR)
void inorder_traversal(struct node*tree)
{
 if(tree!=NULL)
 {
 inorder_traversal(tree->left);
 printf("\t%d",tree->data);
 inorder_traversal(tree->right);
 }
}
//pre-order traversal(DLR)
void preorder_traversal(struct node*tree)
{
 if(tree!=NULL)
 {
 printf("\t%d",tree->data);
 preorder_traversal(tree->left);
 preorder_traversal(tree->right);
 }
}
//post-order traversal(LRD)
void postorder_traversal(struct node*tree)
{
 if(tree!=NULL)
 {
 postorder_traversal(tree->left);
 postorder_traversal(tree->right);
 printf("\t%d",tree->data);
 }
}
//Find mirror image
struct node*mirror_image(struct node*tree)
{
 struct node*temp;
 if(tree!=NULL)
 {
 mirror_image(tree->left);
 mirror_image(tree->right);
 temp=tree->left;
 tree->left=tree->right;
 tree->right=temp;
 }
};
//delete a node
struct node*delete_node(struct node *tree, int val)
{
 struct node *temp;
if(tree == NULL)
 {
 return tree;
 }
else if(val < tree->data)
 tree->left = delete_node(tree->left,val);
else if (val > tree->data)
 tree->right = delete_node(tree->right,val);
else
{
//1 or no child
if(tree->left == NULL)
 {
temp =tree->right;
free(tree);
return temp;
}
else if(tree->right == NULL)
 {
temp = tree->left;
free(tree);
 return temp;
}
 //2 children
else {
temp = min(tree->right);//in-order successor
tree->data = temp->data;
tree->right = delete_node(tree->right,temp->data);
}
}
return tree;
}
//delete entire tree
void delete_tree(struct node*tree)
{
 if(tree!=NULL)
 {
 delete_tree(tree->left);
 delete_tree(tree->right);
 free(tree);
 }
}
int main()
{
int num,no,h,n,opt;
struct node*temp;
 do{
 printf("\n\n#ENTER OPERATION TO BE PERFORMED#");
 printf("\n1.CREATE A BINARY SEARCH TREE");
 printf("\n2.INSERT A NODE");
 printf("\n3.DELETE A NODE");
 printf("\n4.SEARCH AN ELEMENT");
 printf("\n5.HEIGHT OF A BST");
 printf("\n6.INORDER TRAVERSAL");
 printf("\n7.PRE ORDER TRAVERSAL");
 printf("\n8.POST ORDER TRAVERSAL");
 printf("\n9.TOTAL NO OF NODES");
 printf("\n10.TOTAL NO OF LEAF/EXTERNAL NODES");
 printf("\n11.TOTAL NO OF NON LEAF NODES/INTERNAL NODES");
 printf("\n12.FIND MIN");
 printf("\n13.FIND MAX");
 printf("\n14.FIND MIRROR IMAGE");
 printf("\n15.DELETE THE ENTIRE TREE");
 printf("\n16.EXIT");
 printf("\nENTER OPERATION NO:");
 scanf("%d",&opt);
switch(opt)
{
 case 1: tree=create(tree);
 break;
 case 2: printf("\n enter number to be inserted:");
 scanf("%d",&num);
 tree=insert(tree,num);
 printf("\n %d inserted",num);
 break;
 case 3:printf("\n enter number to be deleted:");
 scanf("%d",&num);
 tree=delete_node(tree,num);
 printf("\n %d deleted",num);
 break;
 case 4: printf("\n enter number to be searched: ");
 scanf("%d",&no);
 search(tree,no);
 break;
 case 5:printf("\n height of tree:%d",height(tree));
 break;
 case 6:printf("\n result of in-order traversal:");
 inorder_traversal(tree);
 break;
 case 7:printf("\n result of pre-order traversal:");
 preorder_traversal(tree);
 break;
 case 8: printf("\n result of post-order traversal:");
 postorder_traversal(tree);
 break;
 case 9: printf("\n total no of nodes:%d",total_nodes(tree));
 break;
 case 10:printf("\n total no of leaf nodes:%d",leaf_nodes(tree));
 break;
 case 11:printf("\n total no of non leaf nodes:%d",non_leaf_nodes(tree));
 break;
 case 12:temp=min(tree);
 printf("\n min element of bst:%d",temp->data);
 break;
 case 13:temp=max(tree);
 printf("\n max element of bst:%d",temp->data);
 break;
 case 14:mirror_image(tree);
 break;
 case 15:delete_tree(tree);
 printf("\n binary search tree deleted.");
 break;
 case 16:break;
}
}while(opt!=16);
return 0;
}
