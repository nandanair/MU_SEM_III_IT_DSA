#include <stdio.h>
#include<string.h>
#include<ctype.h>
#include<stdlib.h>
int stack_arr[200];
int top=-1;

//PUSH OPERATION
void push(int data)
{

  top+=1;
  stack_arr[top]=data;
}
//POP OPERATION
int pop()
{
if(top!=-1)
   {

    int value=stack_arr[top];
        top-=1;
        return value;
   }
   else
    return -1;

}
//CHECK FOR OPERATOR
int check_operator( char op )
{
if(op=='^'||op=='*'||op=='/'||op=='+'||op=='-')
    return 1;
else
    return 0;
}
//CHECK PRECEDENCE OF OPERATOR
int check_precedence(char value)
{
    if(value=='^')
        return 3;
    else if(value=='*'||value=='/')
        return 2;
    else if(value=='+'||value=='-')
        return 1;
    else
        return 0;
}
//CONVERTING INFIX TO POSTFIX
void infix_2_postfix(char infix[],char postfix[])
{
    int i=0,j=0;
    char data,value;
    strcat(infix,")");
    push('(');
    data=infix[i];
    while(data!='\0')
    {
        if(data=='(')
            push(data);
        else if(isdigit(data)||isalpha(data))
        {
            postfix[j]=data;
            j+=1;
        }
        else if(check_operator(data)==1)
        {
            value=pop();
            while(check_operator(value)==1&&check_precedence(value)>=check_precedence(data))
            {
                postfix[j]=value;
                j+=1;
                value=pop();
            }
            push(value);
            push(data);


         }
         else if(data==')')
         {
             value=pop();
             while(value!='(')
             {
                 postfix[j]=value;
                 j+=1;
                 value=pop();

             }
         }
         else
         {
             printf("invalid infix expression");
             getchar();
             exit(1);
         }
   i++;
   data=infix[i];

  }

if(top>=0)

    printf("invalid expression");

    else
    postfix[j]='\0';
eval_postfix(postfix);




}
//EVALUATING POSTFIX OPERATION
void eval_postfix(char stack[])
{

  int MAX=0,op1=0,op2=0,result=0,val=0;
   MAX=strlen(stack);
    for(int i=0;i<=MAX-1;i++)
    {
        if (stack[i]=='+'||stack[i]=='-'||stack[i]=='*'||stack[i]=='/')
        {

            op2=pop();
            op1=pop();
            if(op1!=-1&&op2!=-1)
            {


            switch(stack[i])
            {
            case'+':
                result=op1+op2;
                break;
            case'-':
                result=op1-op2;
                break;
            case'*':
                result=op1*op2;
                break;
            case'/':
                result=op1/op2;
                break;
            }
            push(result);
            }
        }
        else
        {
            val=stack[i]-'0';
            push(val);
        }
    }
display_result();




}
//DISPLAY RESULT FUNCTION
int display_result()
{
    if(top ==0)
        printf("RESULT=%d\n",stack_arr[0]);
     else
         printf("INVALID EXPRESSION");
return 0;

}
int main()
{


    char infix[200],postfix[200];
    printf("enter infix expression:");
    gets(infix);
    infix_2_postfix(infix,postfix);




    return 0;
}
